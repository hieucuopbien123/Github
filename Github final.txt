-> Tortoise Git là 1 công cụ git ui vai trò giống như Github Desktop thôi

-> Git flow là thứ được dùng nhiều nhất dù kp lúc nào cũng tuân theo đủ loại nhánh: feature -> develop -> release -> production -> master
Nhánh master k cho phép commit trực tiếp mà chỉ được merge từ branch khác.
Nhánh feature nên được xóa sau khi merge vì nh nhánh rất khó quản lý
Sau khi code hết 1 cụm các feature vào trong nhánh develop tức 1 chức năng lớn đã hoàn thành -> nếu xác nhận sự ra mắt của sản phẩm thì sẽ merge vào nhánh release (các feature của 1 sản phẩm mà k chắc chắn ra mắt thì k cần merge vào develop từ đầu) -> fix bug tiếp ở nhánh release đến khi hết bug sẽ merge vào production -> cuối cùng mới vào master -> nhánh release fix hết bug cũng merge vào develop để code tiếp develop

-> Git merge có 2 chế độ:
Fast Forward: nếu có conflict, ta phải resolve chúng rồi commit
Fast Forward Only: nếu có conflict, merge sẽ tự abort

Chú ý cú pháp merge và rebase:
git merge: sẽ thay đổi commit đúng theo trình tự thời gian. Nhánh A gọi git merge nhánh B tức gộp nhánh B vào nhánh A và sau cùng cả 2 nhánh cùng trạng thái
git rebase: sẽ đổi base của 2 nhánh. Phần base là phần commit chung của cả 2. Nhánh A gọi git rebase nhánh B thì trình tự thời gian k được đảm bảo nữa mà nhánh B sẽ thành base của nhánh A tức nhánh A biến thành: [base gốc nhánh A][phần khác của nhánh B][phần khác của nhánh A ở cuối]

Khi tạo merge request, phải resolve conflicts. Khi resolve conflicts, nó tương đương với vc merge từ target branch vào source branch
Khi merge chú ý là có thể delete source branch hoặc squash toàn bộ commit trong source branch

-> Squash là hành động gom nhiều commit lại làm một, dùng git rebase để làm điều này

-> Phân biệt hàm: khi ta chạy git branch -a, nó hiển thị mọi nhánh nhưng thực ra là nó lưu 1 phiên bản remote cache ở trong local, VD ta chỉ clone 1 nhanh thì nó cũng tự tạo ra phiên bản cho các nhánh khác. Vc thao tác với các nhánh trong remotes như v có thể k chuẩn với nhanh remote gốc
=> Hàm git fetch sẽ pull data từ nhánh remote về nhánh remote ở local nhưng k đổi phần local repository, ta cũng có thể chỉ fetch 1 nhánh nếu thích. Nó đổi phần nhánh màu đỏ có chữ remotes mà ta phải merge tiếp mới được.
Tức là: git fetch + git merge(nhánh remotes ở local merge với nhánh hiện tại ở local) = git pull => tức fetch về nó chỉ ở nhánh tạm remotes, phải merge phát nữa mới tương đương được như pull.
Do đó đôi khi: git pull <remotes branch> nó éo chạy vì nó tưởng nhánh ở remote ta đang gọi éo tồn tại vì k có trong phần branch màu đỏ mà phải get fetch r git merge nhánh ở local or pull lại mới được.

-> Git là 1 loại distributed version control system, nó k có central repo (source of truth). Git free và opensource nên có thể tạo ra 1 ứng dụng tương tự dựa trên ứng dụng gốc

-> Graph được tạo dựa trên commit, mỗi commit gắn với 1 or nhiều branch
git diff  => k có tham số gì cả sẽ check khác biệt của current và staged
Add xong nhận ra sai và k muốn add cái đó, có thể tự fix r add cái mới or dùng git reset .

-> Clone 2 cách:
HTTPS: đôi lúc phải nhập tk, mk (connect to git)
SSH: trao đổi thông qua 1 SSH key, khi dùng nó sẽ lưu SSH key vào bảng và gửi kèm mỗi lần thao tác để xác nhận, do đó k cần input user name and password gì cả

-> git config --list => show mọi config

-> Commit conventions cú pháp chuẩn:
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
=> Tuân thủ cả dấu cách dòng.
<type> có thể là feat/fix/build/cli/chore/docs/styles/refactor/test/perf
[optional scope] là thứ mô tả section trong codebase bằng 1 danh từ như: lang, git, html, api, parser tùy ý
[optional footer(s)] có thể là BREAKING CHANGE sẽ mô tả 1 sự thay đổi lớn. Có thể dùng dấu ! sau type/scope cũng mang ý nghĩa tương tự. Còn bth, footer là những thứ mô tả bth.

VD multiline body:
fix: prevent racing of requests

Introduce a request id and a reference to latest request. Dismiss incoming responses other than from latest request.
Remove timeouts which were used to mitigate the racing issue but are obsolete now.

Reviewed-by: Z
Refs: #123

Có nơi, nó dùng scope đằng trước nhìn dễ hơn:
VD: [GIT]feat: add data

-> Lỗi SSL cerfiticate:
K nên tắt verifySSL vì có thể bị tấn công bằng man in the middle. Ở phiên bản git hiện tại của window, có thể config cho git sử dụng schannel thay vì curl CA như trước. 
Set với: git config --global http.sslbackend schannel

-> Đang làm việc ở branch A, người khác push lên 1 branch mới toanh là B, ta cần merge branch B vào A
Nếu git branch -a sẽ k thấy nhánh B vì nó mới push lên, phải chạy git fetch sẽ thấy nhánh B. Ta checkout nhánh B sẽ đang ở nhánh tạm có nội dung giống nhánh B ở local. Đặc điểm của nhánh tạm này là đổi nhánh sẽ mất và k thể quay lại -> ta phải checkout -b B tiếp từ nhánh tạm để có nhánh B thực sự ở local. 
Đang ở branch A, git merge branch B sẽ merge branch B vào A



-> Dùng git cherry-pick
Vấn đề 1: ta muốn 1 lần commit áp dụng vào cả 2 branch A và B
Vấn đề 2: ta muốn lấy n commit bất kỳ từ branch A và áp dụng cho branch B. Tức mọi phần code thay đổi ở n commit trên branch A sẽ áp dụng cho B

Lệnh git merge 2 branch bằng cách kết hợp các commit lại và sinh ra commit merge ở cuối. Còn git rebase nhánh B khi đang ở nhánh A sẽ thay đổi base nhánh A thành nhánh B và thêm các commit của A vào cuối. Cả 2 cái đều k giải quyết được mà phải dùng git cherry-pick

--> Bốc 1 commit bất kỳ từ nhánh A sang nhánh B:
git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]
		  [-S[<keyid>]] <commit>…
git cherry-pick --continue
git cherry-pick --quit
git cherry-pick --abort

VD1 lấy commit từ 1 branch bỏ vào master:
git checkout master
git cherry-pick <nhánh>~1

Hoặc chỉ định hash commit: git cherry-pick <hash commit> => vì hash commit luôn là duy nhất nên k cần xđ branch nào

VD2 lấy n commits từ 1 brach bỏ vào master
# Nếu muốn thêm 1 vài commit, không liên tục
git cherry-pick commit_id1 commit_id3

# Nếu muốn thêm 1 loạt commit lần lượt cạnh nhau
git cherry-pick commit_id1...commit_id5

# Với code trên, thì commit_id1 sẽ ko được thêm vào. Để đưa commit được tính vào trong branch muốn thêm thì:
git cherry-pick commit_id1^..commit_id5

VD3 apply 1 commit A cho cả 2 branch-X và branch-Y
# Đang ở branch-X, thực hiện commit để tạo ra commit A
git add -A
git commit -m " finish commit A"

# Checkout sang branch Y và dùng cherry-pick
git checkout branch-Y
git cherry-pick branch-X => tự dùng commit trên cùng

=> Cherry pick cũng có conflict, phải resolve, add r commit lại



-> Dùng git reflog => biện pháp cuối cùng
Lệnh git reflog sẽ lưu lại lịch sử thao tác trên git như commit, xóa branch, reset. Ta có thể undo các hành động, or thực hiện lại các hành động thoải mái

git reflog => xem lịch sử thao tác git trên mọi nhánh
git reflog a => xem lịch sử thao tác git chỉ trên nhánh a

- Khôi phục branch x đã bị xóa mà chưa push:
git reflog => hiển thị lịch sử thao tác git, ta tìm vị trí HEAD@{n} là thao tác mới nhất ở nhánh x muốn được khôi phục về. 
git checkout -b x 'HEAD@{n}' => tạo lại nhánh x có trạng thái y như HEAD@{n}, ta có thể đặt tên nhánh là gì cx được.

- Khôi phục code khi lỡ dùng git reset --hard:
1) Nó không khôi phục được khi ta chưa commit code

2) Đã commit code, chưa commit thêm gì, lỡ gọi git reset --hard HEAD~1 (xóa commit mới nhất) thay vì git reset --soft HEAD~1 (để sửa commit mới nhất), cần khôi phục commit đã xóa
git reflog => thấy những thao tác cũ
Ta tìm hành động cuối cùng trước khi xóa, thg ở đây là HEAD@{1} thì dùng: git reset --hard HEAD@{1} là xong

3) Xóa commit cũ, thêm commit mới, lại muốn khôi phục commit cũ kia:
git reflog => tìm id của hành động mà dùng để thêm commit cũ vào, 
git cherry-pick <id hành động> => để thêm lại hành động đó vào nhánh mới nhất

- Tương tự có thể tùy biến. VD ta muốn rebase từ develop vào feature nhưng lại rebase nhầm master vào feature. 
Ta cần hoàn tác thì lại git reflog để tìm id của hành động gần nhất trước khi rebase -> git reset --hard HEAD@{n} với HEAD@{n} là hành động tìm được


