Chỉ ghi những thứ cần nhiều bước, kp là vai trò từng lệnh:
+) Tạo 1 dự án mới toanh liên kết với git trên remote: git init -> git remote add origin <url remote>
+) Sửa config file khắc phục lỗi config: git config --global/system --edit -> kéo xuống -> Insert -> xóa config gây lỗi -> Esc -> :wq!
+) Commit lên local r push lên remote: git status -s -> git add . -> git commit -m "message" -> git push -u origin <tên nhánh> (next)-> git pull -> Chọn sửa -> git add . -> git commit -m "message" -> git push
+) Trở về 1 commit cũ trên 1 nhánh mới: git checkout <hash nhánh cũ> -> git checkout -b <tên nhánh>
+) Để merge nhánh A với nhánh B: git checkout <nhánh A> -> git merge <nhánh B> -m "có thể bỏ" (next)-> resolve conflict -> git add . -> git commit -m "messge"
+) Để rebase nhánh A có base là nhánh B: git checkout <nhánh A> -> git rebase <nhánh B> (next)-> resolve conflict -> git add .(để lưu lại thay đổi resolve conflict) -> git rebase --continue -> Insert -> sửa thông tin các commit -> Esc -> :wq!
+) Để sửa, gộp N commit cũ mới nhất và ép remote và mọi người đồng bộ với nó: git rebase -i HEAD~N -> i -> sửa các commit (p là giữ commit, s là vẫn dùng commit này nhưng đè vào commit trước đó, r là giữ commit này nhưng viết lại message, từ trên xuống là commit từ cũ đến mới, xóa dòng commit nào để xóa commit đó) -> Esc -> :wq! -> resolve conflict(nếu có) -> git add . -> git rebase --continue -> i -> sửa message nếu cần -> Esc -> :wq! -> git push origin +<tên nhánh> để push lên remote -> những người khác vào đồng bộ sẽ bị conflict thì phải dùng git pull --rebase
+) Clone 1 dự án mẫu về và dùng nó thành 1 dự án mới của ta: git clone-> remote remove origin-> lên github tạo 1 repos mới -> remote add origin mới của ta
+) Ta đang làm ở nhanh A, 1 người làm nhánh B, có 1 nhánh C là nhánh develop cuối cùng cần nạp vào => người làm nhánh B xong báo cho ta. Ta có thể merge nó với nhánh C or merge với nhánh A xong lại merge A với C đều được. Giả sử chơi cách 2 và ta đang ở local k có nhánh B của người đó: git branch -a và lấy branch remotes của B -> git checkout remotes/.. chuyển sang nhánh B -> git checkout -b D -> là có nhánh D giống nhánh B nhưng ở local -> chỉnh sửa lại nhánh D và commit nhánh D -> git checkout B -> git merge D -> solve conflict nếu có -> git add -> commit -> push B lên


Lệnh quan trọng tiện dụng cần nhớ và phân biệt lệnh:
git add -u => staged các file đã được add từ trước, bỏ qua các file untracked
git commit --amend -m "message" => sửa commit cuối cùng thành commit hiện tại
git log --oneline --graph => hiển thị dễ nhìn và rõ cả gộp nhánh, pull
git branch -a => xem mọi nhánh cả remote cả local
git checkout <hash> <link file/-- .> => phục hồi lại file ở commit nào, phục hồi xong nó tự động đã được git add rồi
git checkout <link file> => phục hồi lại file nào ở commit cuối cùng
git branch -m "old_branch" "new_branch" => đổi tên branch
git branch -v => liệt kê mọi nhánh và commit cuối
git branch --merged/--no-merged => liệt kê các nhánh được/k được merge với nhánh hiện tại
git submodule add <url> <tên submodule> => thêm 1 repos khác vào repos này. Or ta git clone xong xóa thư mục .git đi
git reset --hard <hash> => quay lại đến commit nào
git rm -r --cached => sau khi dùng gitignore 

git clone --single-branch --branch <branchname> <remote-repo> => chỉ clone 1 branch từ remote, cái này dùng khi 1 người mới vào -> mới vào thì pull 1 nhanh về thôi chứ sao lại copy
git checkout -b <tên nhánh mới ở local> origin/<tên nhánh remote> => tạo 1 nhánh mới ở local giống 1 nhánh ở remote
git pull origin <tên branch remote> => pull 1 nhánh từ remote về nhánh hiện tại ở local

git branch -d <tên branch> => xóa nhánh ở local
git push origin --delete <tên branch> => xóa nhánh ở remote
git push -u origin <branch> => push 1 nhánh nào lên remote

git reset --soft HEAD~1 => hủy commit cuối và mọi thay đổi ở commit cuối chuyển vào vùng staging
git reset --hard HEAD~1 => hủy commit cuối và undo mọi thay đổi ở các file, nếu chưa push lên remote thì lệnh này làm mất dữ liệu file
git reset --hard => undo các lệnh git add mới nhất và mất dữ liệu file, quay về y như commit cuối cùng
git reset => undo các lệnh git add và file đã sửa đổi thành modified chưa được add

git diff => khác biệt của working tree với commit cuối
git diff --staged => khác biệt của vùng staged với commit cuối
git diff hash1 hash2 => khác biệt 2 commit
git diff branch1 branch2 => khác biệt 2 branch

git rebase --abort => abort rebase và checkout về nhánh original
git rebase --quit => abort rebase và giữ HEAD ở đúng vị trí hiện tại

Luồng làm việc: Head đang ở nhánh master là dự án chính -> ta muốn các bạn vào làm các dự án con thì bảo các bạn checkout ra nhánh alpha từ nhánh master và các bạn làm việc ở nhánh alpha
TH1: Sau đó nhánh master phát sinh lỗi và ta fix lỗi ở nhánh đó bằng 1 nhánh mới sualoigap -> sau khi fix lỗi thấy ổn thì ta merge bằng cách checkout master và merge với sualoigap-> HEAD ở nhánh master đuổi kịp mọi thứ của sualoigap -> xóa nhanh sualoigap đi
TH2: Sau khi các bạn làm việc xong nhánh alpha -> git checkout master và merge với alpha -> master có mọi thứ của alpha và đang là mới nhất (vì lần gộp này có xung đột so với alpha) -> có thể delete alpha rồi
TH3: Đang làm việc tại nhánh master ở local tự dưng thấy 1 commit trước đó cần sửa đổi -> checkout nó và làm việc với nó trên beta -> sau khi sửa xong thì muốn master cũng có thì ta cho nó làm base bằng cách -> HEAD đang ở beta thì ta checkout beta và rebase với master -> master giờ là base của beta và HEAD đang ở beta -> lại phải checkout master merge với beta để master đuổi kịp beta(như TH1) -> xóa beta được

Lỗi file name too long => fix: git config core.longpaths true

Lỗi: unable to access The requested URL returned error: 400 k cho push => ta dùng: git remote rm origin -> add lại remote origin
